
function [ROC_struct, exp_struct, fig_list] = ...
      psycho_AFC(exp_struct, AFC_struct)


  %% analyze Speed of Sight 2AFC data for single subject
  global MAX_X_FACTOR_VALS
  global NUM_CONFIDENCE_BINS


  [num_trials, num_x_factors] = size(exp_struct.trial_struct.x_factors);
  if exp_struct.total ~= num_trials
    warning(['exp_struct.total ~= num_trials; ', ...
	     'exp_struct.total = ', ...
	     num2str(exp_struct.total),
	     '; ', ...
	     'num_trials = ', ...
	     num2str(num_trials)]);
  end
  ROC_struct = struct;
  ROC_struct.num_trials = num_trials;
  ROC_struct.num_x_factors = num_x_factors;

  %% set to zero if error condition
  ROC_struct.valid_flag = 1;

  ROC_struct.dim_x_factors = ones(1,num_x_factors);
  ROC_struct.prod_x_factors = ones(1,num_x_factors);
  ROC_struct.x_factor_vals = cell(1,num_x_factors);
  ROC_struct.x_factor_trials = cell(1,num_x_factors);
  ROC_struct.num_x_factor_trials = cell(1,num_x_factors);

  for i_x_factor = 1 : num_x_factors
    x_factor_min = ...
	min(squeeze(exp_struct.trial_struct.x_factors(:,i_x_factor)));
    x_factor_max = ...
	max(squeeze(exp_struct.trial_struct.x_factors(:,i_x_factor)));
    x_factor_mean = ...
	mean(squeeze(exp_struct.trial_struct.x_factors(:,i_x_factor)));
    x_factor_median = ...
	median(squeeze(exp_struct.trial_struct.x_factors(:,i_x_factor)));
    x_factor_vals = unique(squeeze(exp_struct.trial_struct.x_factors(:,i_x_factor)));
    dim_x_factor = length(x_factor_vals);
    if dim_x_factor > MAX_X_FACTOR_VALS(i_x_factor)
      if MAX_X_FACTOR_VALS(i_x_factor) == 2
	x_factor_edges = zeros(1,3);
	x_factor_edges(1) = x_factor_min;
	x_factor_edges(2) = x_factor_median;
	x_factor_edges(3) = x_factor_max;
	[hist_x_factor, hist_x_index] = ...
	    histc(squeeze(exp_struct.trial_struct.x_factors(:,i_x_factor)), ...
		  x_factor_edges);
	x_factor_vals = zeros(1,2);
	x_factor_vals(1) = ...
	    median(exp_struct.trial_struct.x_factors(hist_x_index==1, i_x_factor));
	x_factor_vals(2) = ...
	    median(exp_struct.trial_struct.x_factors(hist_x_index==2, i_x_factor));
      else
	[hist_x_factor, x_factor_vals] = ...
	    hist(squeeze(exp_struct.trial_struct.x_factors(:,i_x_factor)), ...
		 MAX_X_FACTOR_VALS(i_x_factor));
      end
    end
    ROC_struct.x_factor_vals{i_x_factor} = x_factor_vals;
    dim_x_factor = length(x_factor_vals);
    prod_x_factors = prod(ROC_struct.dim_x_factors(1:i_x_factor));
    ROC_struct.dim_x_factors(i_x_factor) = dim_x_factor;
    ROC_struct.prod_x_factors(i_x_factor) = prod_x_factors;
    ROC_struct.x_factor_trials{i_x_factor} = cell(1,dim_x_factor);
    ROC_struct.num_x_factor_trials{i_x_factor} = zeros(1,dim_x_factor);
    for i_val = 1 : dim_x_factor
      if i_val > 1
	x_factor_left = ...
	    (x_factor_vals(i_val - 1) + x_factor_vals(i_val)) / 2;
      else
	x_factor_left = ...
	    x_factor_min - 0.01*max(abs(x_factor_mean), abs(x_factor_max));
      end
      if i_val < dim_x_factor
	x_factor_right = ...
	    (x_factor_vals(i_val) + x_factor_vals(i_val + 1))/2;
      else
	x_factor_right = x_factor_max;
      end
      ROC_struct.x_factor_trials{i_x_factor}{i_val} = ...
	  find( (exp_struct.trial_struct.x_factors(:,i_x_factor) ...
		 > x_factor_left) ...
	       & ...
	       (exp_struct.trial_struct.x_factors(:,i_x_factor) ...
		<= x_factor_right) );
      ROC_struct.num_x_factor_trials{i_x_factor}(i_val) = ...
	  length(ROC_struct.x_factor_trials{i_x_factor}{i_val});
      disp(['ROC_struct.num_x_factor_trials', ...
	    '{', num2str(i_x_factor), '}', ...
	    '(', num2str(i_val), ')= ', ...
	    num2str(ROC_struct.num_x_factor_trials{i_x_factor}(i_val))]);
    end %% i_val
  end %% i_x_factor

  ROC_struct.target_trials = cell(1,AFC_struct.AFC_mode);
  for i_AFC = 1 : AFC_struct.AFC_mode
    ROC_struct.target_trials{i_AFC} = ...
	find( exp_struct.trial_struct.target_flag == (i_AFC - 1));
  end


  %% get/check SOA values
  if (AFC_struct.SOA_index > 0) &&  (AFC_struct.SOA_index <= num_x_factors)
    SOA_vals = 1000 * ...
	(exp_struct.StimulusOnsetTime(:, 2) - ...
	 exp_struct.StimulusOnsetTime(:, 1));
    num_SOAs = unique(SOA_vals);
    if num_SOAs ~= dim_x_factors(AFC_struct.SOA_index)
      warning(['dim_x_factors(AFC_struct.SOA_index) ~= num_SOAs; ', ...
	       'dim_x_factors(AFC_struct.SOA_index) = ', ...
	       num2str(dim_x_factors(AFC_struct.SOA_index)),
	       '; ', ...
	       'num_SOAs = ', ...
	       num2str(num_SOAs)]);    
    end
    for i_trial = 1 : num_trials
      SOA_check = ...
	  (...
	   SOA_vals(i_trial) - ...
	   exp_struct.trial_struct.x_factors(i_trial,AFC_struct.SOA_index)
	   ) ...
	  / ...
	  (...
	   SOA_vals(i_trial) + 0.001 + ...
	   exp_struct.trial_struct.x_factors(i_trial,AFC_struct.SOA_index) ...
	   );
      if (SOA_check > 0.001)
	SOA_index = ...
	    exp_struct.trial_struct.x_factors(i_trial,AFC_struct.SOA_index);
	warning(['SOA_check > 0.001; ', ...
		 'SOA_vals(i_trial) = ', ...
		 num2str(SOA_vals(i_trial)),
		 '; ', ...
		 'x_factor(i_trial,AFC_struct.SOA_index) = ', ...
		 num2str(SOA_index)]);    
      end %% SOA_check
    end %% i_trial
  end %% AFC_struct.SOA_index > 0



  %% build AFC data structures for organizing trials by target_flag
  %% and x_factor values
  num_combinations = prod(ROC_struct.dim_x_factors);
  ROC_struct.num_combinations = num_combinations;
  ROC_struct.AFC_trials = ...
      cell([AFC_struct.AFC_mode, ROC_struct.dim_x_factors]);
  ROC_struct.AFC_confidence = ...
      cell([AFC_struct.AFC_mode, ROC_struct.dim_x_factors]);
  ROC_struct.AFC_correct = ...
      cell([AFC_struct.AFC_mode, ROC_struct.dim_x_factors]);
  ROC_struct.AFC_target_flag = ...
      cell([AFC_struct.AFC_mode, ROC_struct.dim_x_factors]);
  ROC_struct.AFC_choice = ...
      cell([AFC_struct.AFC_mode, ROC_struct.dim_x_factors]);

  for i_AFC = 1 : AFC_struct.AFC_mode
    target_trials = ...
	ROC_struct.target_trials{i_AFC};

    for i_combination = 1 : num_combinations
      x_factor_trials = target_trials;
      x_factor_subindex = zeros(1,num_x_factors);
      %%x_factor_subindex = ...
      %%ind2sub([ROC_struct.dim_x_factors(:)], i_combination);
      i_residule = i_combination;
      for i_x_factor = num_x_factors : -1 : 1
	i_x_index = 1 + ...
	    floor((i_residule-1) / ...
		  ROC_struct.prod_x_factors(i_x_factor));
	x_factor_subindex(i_x_factor) = i_x_index;
	i_residule = ...
	    i_combination - ...
	    ( i_x_index - 1 ) * ROC_struct.prod_x_factors(i_x_factor);
	x_factor_trials = ...
	    intersect(x_factor_trials, ...
		      ROC_struct.x_factor_trials{i_x_factor}{i_x_index});
      end  %% i_x_factor

      AFC_index = ...
	  sub2ind([AFC_struct.AFC_mode, num_combinations], ...
		  i_AFC, i_combination);
      ROC_struct.AFC_trials{AFC_index} = ...
	  x_factor_trials;
      ROC_struct.AFC_confidence{AFC_index} = ...
	  exp_struct.trial_struct.confidence(x_factor_trials) .* ...
	    ( 1 - 2 * exp_struct.trial_struct.choice(x_factor_trials) );
      ROC_struct.AFC_correct{AFC_index} = ...
	  exp_struct.trial_struct.correct(x_factor_trials);
      ROC_struct.AFC_target_flag{AFC_index} = ...
	  exp_struct.trial_struct.target_flag(x_factor_trials);
      ROC_struct.AFC_choice{AFC_index} = ...
	  exp_struct.trial_struct.choice(x_factor_trials);
      
    end  %% i_combination
  end  %% i_AFC

  [fig_list, ROC_struct] = ...
      psycho_AFC_ROC(exp_struct, ...
		     ROC_struct);

