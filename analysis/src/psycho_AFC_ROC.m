function [fig_list, ROC_struct] = ...
      psycho_AFC_ROC(exp_struct, ...
		     ROC_struct)

  [AFC_mode, prod_dim_x_factors] = ...
      size(ROC_struct.AFC_confidence);
  
  global NUM_CONFIDENCE_BINS
  global AFC_PLOT_HIST_FLAG AFC_PLOT_IDEAL_FLAG AFC_PLOT_ROC_FLAG

  fig_list = [];

  rand_ID = num2str(exp_struct.seed);

  %% ROC data structures
  ROC_struct.AFC_hist = cell(ROC_struct.dim_x_factors);
  ROC_struct.AFC_cumsum = cell(ROC_struct.dim_x_factors);
  ROC_struct.AFC_bins = cell(ROC_struct.dim_x_factors);
  ROC_struct.AFC_ideal = cell(ROC_struct.dim_x_factors);
  ROC_struct.AFC_ROC = cell(ROC_struct.dim_x_factors);
  ROC_struct.AFC_AUC = zeros(ROC_struct.dim_x_factors);
  ROC_struct.AFC_performance = cell(ROC_struct.dim_x_factors);
  ROC_struct.AFC_error = cell(ROC_struct.dim_x_factors);
  
  num_combinations = ROC_struct.num_combinations;
  for i_combination = 1 : num_combinations

    disp(['i_combination = ', num2str(i_combination)]);
    
    x_factor_subindex = zeros(1,ROC_struct.num_x_factors);
    %%x_factor_subindex = ...
    %%ind2sub([ROC_struct.dim_x_factors(:)], i_combination);
    i_residule = i_combination;
    for i_x_factor = ROC_struct.num_x_factors : -1 : 1
      i_x_index = 1 + ...
	    floor((i_residule-1) / ...
		  ROC_struct.prod_x_factors(i_x_factor));
      x_factor_subindex(i_x_factor) = i_x_index;
      i_residule = ...
	  i_combination - ...
	  ( i_x_index - 1 ) * ROC_struct.prod_x_factors(i_x_factor);
    end  %% i_x_factor
    disp(['x_factor_subindex = ', num2str(x_factor_subindex)]);
      

    %% compute absolute performance
    AFC_target_flag = cell(AFC_mode, 1);
    AFC_choice = cell(AFC_mode, 1);
    AFC_correct = cell(AFC_mode, 1);
    for i_AFC = 1 : AFC_mode
      AFC_index = ...
	sub2ind([AFC_mode, num_combinations], ...
		i_AFC, i_combination);
      AFC_target_flag{i_AFC} = ...
	  ROC_struct.AFC_target_flag{AFC_index};
      AFC_choice{i_AFC} = ...
	  ROC_struct.AFC_choice{AFC_index};
      AFC_correct{i_AFC} = ...
	  ROC_struct.AFC_correct{AFC_index};
    end  %% i_AFC
    [AFC_performance, AFC_error] = ...
	psycho_calcAFCCorrect(AFC_target_flag, ...
			      AFC_choice, ...
			      AFC_correct);
    ROC_struct.AFC_performance{i_combination} = ...
	AFC_performance;
    ROC_struct.AFC_error{i_combination} = ...
	AFC_error;
    for i_AFC = 1 : AFC_mode
      disp(['AFC_performance(', num2str(i_AFC), ')', ...
	    ' = ', num2str(AFC_performance(i_AFC)), ...
	    ' +/- ', ...
	    num2str(AFC_error(i_AFC))]);
    end %% i_AFC
    disp(['AFC_performance(', num2str(i_AFC+1), ') = ', ...
	  num2str(AFC_performance(i_AFC+1)), ...
	  ' +/- ', ...
	  num2str(AFC_error(i_AFC+1))]);
      
      
    %% compute ROC histograms for AFC trials
    AFC_confidence = cell(AFC_mode, 1);
    for i_AFC = 1 : AFC_mode
      AFC_index = ...
	sub2ind([AFC_mode, num_combinations], ...
		i_AFC, i_combination);
      AFC_confidence{i_AFC} = ...
	  ROC_struct.AFC_confidence{AFC_index};
    end  %% i_AFC
    [AFC_hist, AFC_bins] = ...
	psycho_calcAFCHist(AFC_confidence);
      
    ROC_struct.AFC_hist{i_combination} = ...
	AFC_hist;
    ROC_struct.AFC_bins{i_combination} = ...
	AFC_bins;

    if AFC_PLOT_HIST_FLAG
      [fig_tmp] = ...
	  psycho_plotAFCHist(AFC_hist, ...
			     AFC_bins, ...
			     [num2str(...
				      exp_struct.seed, ...
				      '%8d'...
				      ), ...
			      ': ', ...
			      num2str(x_factor_subindex)]);
      fig_list = [fig_list; fig_tmp];
    end


    [AFC_cumsum, AFC_ideal] = ...
	psycho_calcAFCCumsum(AFC_hist);
      
    ROC_struct.AFC_cumsum{i_combination} = ...
	AFC_cumsum;
    ROC_struct.AFC_ideal{i_combination} = ...
	AFC_ideal;

    if AFC_PLOT_IDEAL_FLAG
      [fig_tmp] = ...
	  psycho_plotAFCIdeal(AFC_ideal, ...
			      AFC_bins, ...
			      [num2str(exp_struct.seed, ...
				       '%8d'...
				       ), ...
			       ': ', ...
			       num2str(x_factor_subindex)]);
      fig_list = [fig_list; fig_tmp];
    end

      
    [AFC_ROC, AFC_AUC] = ...
	psycho_calcAFCROC(AFC_cumsum);
    
    ROC_struct.AFC_ROC{i_combination} = ...
	AFC_ROC;
    ROC_struct.AFC_AUC(i_combination) = ...
	AFC_AUC;
    
    disp(['AFC_AUC = ', ...
	  num2str(AFC_AUC)]);

    if AFC_PLOT_ROC_FLAG 
      [fig_tmp] = ...
	  psycho_plotAFCROC(AFC_ROC, ...
			    [num2str(exp_struct.seed, '%8d'...
				     ), ...
			     ': ', ...
			     num2str(x_factor_subindex)]);
      fig_list = [fig_list; fig_tmp];
    end

      
    end  %% i_combination
  end  %% i_AFC


